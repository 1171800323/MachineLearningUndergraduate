------------------------------------------------------------满足朴素贝叶斯
number = 100;
[R1,R2] = productData();
R1 = [ones(number,1) R1];
R2 = [ones(number,1) R2];
theta = zeros(size(R1,2),1);
alpha = 0.01;
y = [zeros(number,1);ones(number,1)];
X = [R1;R2];
---------------------不加惩罚项，梯度下降
ntheta = gradientDescent(X, y, theta, alpha);
h = g(X * ntheta);
figure(1);
f = @(x1,x2)ntheta(1) + ntheta(2) * x1 + ntheta(3) * x2;
fimplicit(f,[0 7 -2 10]);
---------------------牛顿法
newtontheta = newton(X,y,theta);
figure(1);
f = @(x1,x2)newtontheta(1) +newtontheta(2) * x1 + newtontheta(3) * x2;
fimplicit(f,[0 7 -2 10]);
----------------------正则化
lambda = 0.1;
rgtheta = gradientDescentRegularization(X,y,theta,alpha,lambda);
figure(1);
f = @(x1,x2)rgtheta(1) + rgtheta(2) * x1 + rgtheta(3) * x2;
fimplicit(f,[0 7 -2 10]);
------------------------------------------------------------不满足朴素贝叶斯
number = 100;
[R1,R2] = productDataNot();
R1 = [ones(number,1) R1];
R2 = [ones(number,1) R2];
theta = zeros(size(R1,2),1);
alpha = 0.01;
y = [zeros(number,1);ones(number,1)];
X = [R1;R2];
---------------------不加惩罚项，梯度下降
ntheta = gradientDescent(X, y, theta, alpha);
h = g(X * ntheta);
figure(1);
f = @(x1,x2)ntheta(1) + ntheta(2) * x1 + ntheta(3) * x2;
fimplicit(f,[0 7 -2 10]);
---------------------牛顿法
newtontheta = newton(X,y,theta);
figure(1);
f = @(x1,x2)newtontheta(1) +newtontheta(2) * x1 + newtontheta(3) * x2;
fimplicit(f,[0 7 -2 10]);
-----------------------------------------------------------------
-----------------------------------------------------------------







------------------------------------------------------------------------------非线性变换
number = 100;
[R1,R2] = productData();
R1 = [ones(number,1) R1 R1.^2];
R2 = [ones(number,1) R2 R2.^2];
theta = zeros(size(R1,2),1);
alpha = 0.01;
y = [zeros(number,1);ones(number,1)];
X = [R1;R2];

ntheta = gradientDescent(X, y, theta, alpha);
h = g(X * ntheta);
figure(1);
f = @(x1,x2)ntheta(1) + ntheta(2) * x1 + ntheta(3) * x2 + ntheta(4) * x1.^ 2 + ntheta(5) * x2.^2;
fimplicit(f,[0 7 -2 10]);
-------------------------------------newton method

newtontheta = newton(X,y,theta);
figure(1);
f = @(x1,x2)newtontheta(1) +newtontheta(2) * x1 + newtontheta(3) * x2 + newtontheta(4) * x1.^ 2 + newtontheta(5) * x2.^2;
fimplicit(f,[0 7 -2 10]);
------------------------------------------------------------------------------UCI数据集

[attrib1, attrib2, attrib3, attrib4, class] = textread('iris.data', '%f%f%f%f%s', 'delimiter', ',');
scatter(attrib3(1:50,1),attrib4(1:50,1));
hold on;
scatter(attrib3(50:100,1),attrib4(50:100,1));
scatter(attrib3(100:150,1),attrib4(100:150,1));
X = [ones(100,1) attrib1(1:100,:) attrib2(1:100,:) attrib3(1:100,:) attrib4(1:100,:)];
y = zeros(100,1);
for i = 1 : 100
    if strcmp(class(i),'Iris-setosa')
        y(i) = 0;
    else
        y(i) = 1;
    end
end

theta = zeros(size(X,2),1);
alpha = 0.1;
ntheta = gradientDescent(X, y, theta, alpha);
h = g(X * ntheta);
-----------------------------------------------------数据集与测试集
[attrib1, attrib2, attrib3, attrib4, class] = textread('trainingset.txt', '%f%f%f%f%s', 'delimiter', ',');
>> [tattrib1, tattrib2, tattrib3, tattrib4, tclass] = textread('testset.txt', '%f%f%f%f%s', 'delimiter', ',');
X = [ones(90,1) attrib1(:) attrib2(:) attrib3(:) attrib4(:)];
y = zeros(90,1);
for i = 1 : 90
    if strcmp(class(i),'Iris-setosa')
        y(i) = 0;
    else
        y(i) = 1;
    end
end

theta = zeros(size(X,2),1);
alpha = 0.01;
ntheta = gradientDescent(X, y, theta, alpha);
Xtest=[ones(10,1) tattrib1(:) tattrib2(:) tattrib3(:) tattrib4(:)];
h=g(Xtest * ntheta);